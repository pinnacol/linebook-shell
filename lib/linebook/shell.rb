require 'erb'

# Generated by Linecook, do not edit.
module Linebook
module Shell
require 'linebook/shell/unix'
include Unix

def shebang
  attributes 'linebook/shell'
  helpers attrs[:linebook][:shell][:module]
  super
end
################################ backup ################################

# Backup a file.
def backup(path, options={})
  backup_path = "#{path}.bak"
  if options[:mv]
    mv_f path, backup_path
  else
    cp_f path, backup_path
  end
  
  chmod 644, backup_path

end

def _backup(*args, &block) # :nodoc:
  capture { backup(*args, &block) }
end

############################### install ###############################

# Installs a file
def install(source, target, options={})
  prepare target
  cp source, target
  chmod options[:mode], target
  chown options[:user], options[:group], target
  
end

def _install(*args, &block) # :nodoc:
  capture { install(*args, &block) }
end

############################### prepare ###############################

# Prepares a file location to recieve a new file by making parent directories as
# needed, and backing up the file if it already exists.
def prepare(target)
  only_if _file?(target) do
    backup target, :mv => true
  end
  
  target_dir = File.dirname(target)
  not_if _directory?(target_dir) do
    mkdir_p target_dir
  end
end

def _prepare(*args, &block) # :nodoc:
  capture { prepare(*args, &block) }
end

################################ recipe ################################

# :stopdoc:
RECIPE_LINE = __LINE__ + 2
RECIPE = "self." + ERB.new(<<'END_OF_TEMPLATE', nil, '<>').src
"<%= env_path %>" - "<%= shell_path %>" "<%= recipe_path(name) %>" $*
<% check_status %>

END_OF_TEMPLATE
# :startdoc:

# 
# ==== RECIPE ERB
#   "<%= env_path %>" - "<%= shell_path %>" "<%= recipe_path(name) %>" $*
#   <% check_status %>
def recipe(name)
  eval(RECIPE, binding, __FILE__, RECIPE_LINE)
  nil
end

def _recipe(*args, &block) # :nodoc:
  capture { recipe(*args, &block) }
end
end
end
