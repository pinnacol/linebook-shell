require 'erb'

# Generated by Linecook, do not edit.
module Linebook
module Shell
require 'linebook/shell/unix'
include Unix

def shebang
  attributes 'linebook/shell'
  
  if shell = attrs['linebook']['shell']
    helpers shell
  end
  
  if os = attrs['linebook']['os']
    helpers os
  end
  
  super
end

################################ backup ################################

# Backup a file.
def backup(path, options={})
  backup_path = "#{path}.bak"
  if options[:mv]
    mv_f path, backup_path
  else
    cp_f path, backup_path
  end
  
  chmod 644, backup_path

end

def _backup(*args, &block) # :nodoc:
  capture { backup(*args, &block) }
end

############################# directory #############################

# 
def directory(target, options={})
  not_if _directory?(target) do 
    mkdir_p target
  end 
  chmod options[:mode], target
  chown options[:user], options[:group], target
end

def _directory(*args, &block) # :nodoc:
  capture { directory(*args, &block) }
end

############################### execute ###############################

# :stopdoc:
EXECUTE_LINE = __LINE__ + 2
EXECUTE = "self." + ERB.new(<<'END_OF_TEMPLATE', nil, '<>').src
<%= cmd %>

<% check_status %>

END_OF_TEMPLATE
# :startdoc:

# 
# ==== EXECUTE ERB
#   <%= cmd %>
#   
#   <% check_status %>
def execute(cmd)
  eval(EXECUTE, binding, __FILE__, EXECUTE_LINE)
  nil
end

def _execute(*args, &block) # :nodoc:
  capture { execute(*args, &block) }
end

################################## file ##################################

# Installs a file from the package.
def file(target, options={})
  source = file_path(options[:source] || File.basename(target))
  install(source, target, options)
end

def _file(*args, &block) # :nodoc:
  capture { file(*args, &block) }
end

################################# group #################################

# 
def group(name, options={})
  not_if _group?(name) do
    addgroup name
  end
end

def _group(*args, &block) # :nodoc:
  capture { group(*args, &block) }
end

########################### group_check ###########################

# :stopdoc:
GROUP_CHECK_LINE = __LINE__ + 2
GROUP_CHECK = "self." + ERB.new(<<'END_OF_TEMPLATE', nil, '<>').src
grep "^<%= name %>:" /etc/group
END_OF_TEMPLATE
# :startdoc:

# 
# ==== GROUP_CHECK ERB
#   grep "^<%= name %>:" /etc/group
def group?(name)
  eval(GROUP_CHECK, binding, __FILE__, GROUP_CHECK_LINE)
  nil
end

def _group?(*args, &block) # :nodoc:
  capture { group?(*args, &block) }
end

############################### install ###############################

# Installs a file
def install(source, target, options={})
  nest_opts(options[:backup], :mv => true) do |opts|
    only_if _file?(target) do
      backup target, opts
    end
  end
  
  nest_opts(options[:directory]) do |opts|
    directory File.dirname(target), opts
  end
  
  cp source, target
  chmod options[:mode], target
  chown options[:user], options[:group], target

end

def _install(*args, &block) # :nodoc:
  capture { install(*args, &block) }
end

############################### package ###############################

# 
def package(name, version=nil)
  raise NotImplementedError
end

def _package(*args, &block) # :nodoc:
  capture { package(*args, &block) }
end

################################ recipe ################################

# :stopdoc:
RECIPE_LINE = __LINE__ + 2
RECIPE = "self." + ERB.new(<<'END_OF_TEMPLATE', nil, '<>').src
"<%= env_path %>" - "<%= shell_path %>" "<%= recipe_path(name) %>" $*
<% check_status %>
END_OF_TEMPLATE
# :startdoc:

# 
# ==== RECIPE ERB
#   "<%= env_path %>" - "<%= shell_path %>" "<%= recipe_path(name) %>" $*
#   <% check_status %>
def recipe(name)
  eval(RECIPE, binding, __FILE__, RECIPE_LINE)
  nil
end

def _recipe(*args, &block) # :nodoc:
  capture { recipe(*args, &block) }
end

############################## template ##############################

# Installs a template from the package.
def template(target, options={})
  template_name = options[:source] || File.basename(target)
  locals = options[:locals] || {}
  
  source = template_path(template_name, locals)
  install(source, target, options)
end

def _template(*args, &block) # :nodoc:
  capture { template(*args, &block) }
end

################################## user ##################################

# 
def user(name, options={})
  not_if _user?(name) do
    adduser name
  end
end

def _user(*args, &block) # :nodoc:
  capture { user(*args, &block) }
end

############################ user_check ############################

# :stopdoc:
USER_CHECK_LINE = __LINE__ + 2
USER_CHECK = "self." + ERB.new(<<'END_OF_TEMPLATE', nil, '<>').src
grep "^<%= name %>:" /etc/passwd
END_OF_TEMPLATE
# :startdoc:

# 
# ==== USER_CHECK ERB
#   grep "^<%= name %>:" /etc/passwd
def user?(name)
  eval(USER_CHECK, binding, __FILE__, USER_CHECK_LINE)
  nil
end

def _user?(*args, &block) # :nodoc:
  capture { user?(*args, &block) }
end
end
end
